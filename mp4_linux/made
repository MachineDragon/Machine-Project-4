Script started on Tue 05 May 2020 10:45:21 AM EDT
tuser@tutor-vserver:~$ ssh mikehj24@users.cs.umb.edu
mikehj24@users.cs.umb.edu's password: 
Welcome to Ubuntu 16.04.6 LTS (GNU/Linux 4.4.0-171-generic x86_64)

66 packages can be updated.
61 updates are security updates.


6 updates could not be installed automatically. For more details,
see /var/log/unattended-upgrades/unattended-upgrades.log

Authorized users only.

Contact: operator@cs.umb.edu or 617-287-6480

You have new mail.
Last login: Tue May  5 10:36:41 2020 from 75.69.60.201
mikehj24@itserver6:~$ cd cs341/mp4_linux
mikehj24@itserver6:~/cs341/mp4_linux$ ls -lg
total 100
-rw-r--r-- 1 cs341-1G  8704 Apr 30 18:27 charGen1.c
-rw-r--r-- 1 cs341-1G  2412 Apr 30 18:27 makefile
-rw-r--r-- 1 cs341-1G  2409 Apr 30 18:27 measure.c
-rwxr-xr-x 1 cs341-1G 21992 May  5 10:36 measure.lnx
-rw-r--r-- 1 cs341-1G  6052 May  5 10:36 measure.o
-rw-r--r-- 1 cs341-1G  1535 May  5 10:36 measure.syms
lrwxrwxrwx 1 cs341-1G    12 May  5 10:36 syms -> measure.syms
-rw-r--r-- 1 cs341-1G  2272 Apr 30 18:27 timepack.h
-rw-r--r-- 1 cs341-1G  4321 May  5 10:36 timepack_sapc.c
-rw-r--r-- 1 cs341-1G  5416 May  5 10:36 timepack_sapc.o
-rw-r--r-- 1 cs341-1G  1934 Apr 30 18:27 timer.c
-rw-r--r-- 1 cs341-1G 14802 May  5 06:52 typescript1
-rw-r--r-- 1 cs341-1G   968 May  3 13:08 typescript1-remote
mikehj24@itserver6:~/cs341/mp4_linux$ pwd
/home/mikehj24/cs341/mp4_linux
mikehj24@itserver6:~/cs341/mp4_linux$ cat time_sapc.c
cat: time_sapc.c: No such file or directory
mikehj24@itserver6:~/cs341/mp4_linux$ cat timepack_sapc.c

/******************************************************************
*
*   file:      timepack_sapc.c
*   author:    Betty O'Neil
*   date:      '88 (MECB)
*
*   revisions: Ethan Bolker, October 1990 to #include header file timepack.h
*              Betty O'Neil, March 1992 to add inittimer
*              Betty O'Neil, S96 to SAPC
*              Bob Wilson, spring 2014
*
*   SAPC timing package.
*   Link with code containing calls to stoptimer, starttimer
*
*   To do:
*      Implement static flag set when timer is running
*        (for now everything returns T_OK)
*/

/* constants and prototypes for timing package primitives */
#include <stdio.h>
#include "timepack.h"
#include <timer.h>
#include <pic.h>
#include <cpu.h>

typedef enum { FALSE, TRUE } Boolean;

/* PC's 8254 timer: one tick consists of 64K counts at 1193182 counts/sec */
#define COUNTS_PER_SEC 1193182 
#define COUNTS_PER_TICK (64*1024)
/* This is a double constant--see K&R, p. 37.  Doubles are great for
 conversion constants.  Just convert back to int at end if apprpriate */
#define USECS_PER_TICK (1000000.0*COUNTS_PER_TICK/COUNTS_PER_SEC)
/* precision = time between possible values, in us */
#define TIMER_PRECISION 1
#define MAX 80

extern const IntHandler irq0inthand;

static int tickcount;
static int startcount;
static int timer_running;
static int startdown;
static int enddown;


void set_timer_count(int count);
void irq0inthandc(void);
void smalldelay(void);

/* set timer ticking.  This is called only once at start of program */
void inittimer()
{
  tickcount = 0;
#ifdef DEBUG
  printf("Disabling interrupts in CPU while setting them up\n");
#endif
  cli();
#ifdef DEBUG  
  printf("Setting interrupt gate for timer, irq 0\n");
#endif
  /* irq 0 maps to slot n = 0x20 in IDT for linux setup */
  set_intr_gate(TIMER0_IRQ+IRQ_TO_INT_N_SHIFT, &irq0inthand);
#ifdef DEBUG
  printf("Commanding PIC to interrupt CPU for irq 0\n");
#endif
  pic_enable_irq(TIMER0_IRQ);
  timer_running = 0;		/* starts running at call to starttimer */
#ifdef DEBUG
  printf("Commanding timer to generate a pulse train using max count\n");
#endif
  set_timer_count(0);	
#ifdef DEBUG
  printf("Enabling interrupts in CPU\n");
#endif
  sti();
}

/* This is NEEDED: future ints could find bogus int handler after this
 * code is overwritten by next download or whatever, requiring reboot.
 * This is called once at end of program.
 */
void shutdowntimer()
{
  cli();
#ifdef DEBUG
  printf("Commanding PIC to shut off irq 0 to CPU\n");
#endif
  pic_disable_irq(TIMER0_IRQ);	/* disallow irq 0 ints to get to CPU */
  sti();
}

/*  for the SAPC case:  microsecond precision (though not microsecond
 *  *accuracy* because of various overhead times involved)
*/
void querytimer(int *precision, int *running)
{
   *precision = TIMER_PRECISION;
   *running = timer_running;
   return;
}

/* start a timed experiment: improve this along with stoptimer */
int starttimer()
{
  startdown = inpt(TIMER0_COUNT_PORT); 
  startdown |= inpt(TIMER0_COUNT_PORT)<<8;


  startcount = tickcount;
  timer_running = TRUE;
  return T_OK;
}

/* temporary crude way: better to read the counter and add in the downcounts
 * (converted to us) since the last tick, and similarly change starttime 
 * to record the starting downcount, and adjust for another partial tick.
 * Remember that printf takes a *lot* of time!!  Don't do it during experiments.
 */
int stoptimer( int *interval )
{
  
*interval = (tickcount - startcount)*USECS_PER_TICK;

#ifdef DEBUG
  printf("stoptimer reached, returning inaccurate time until fixed\n");
#endif
  timer_running = FALSE;
  return T_OK;

}

/* about 10 us on a SAPC (400Mhz Pentium) */
void smalldelay(void)
{
  int i;
  
  for (i=0;i<1000;i++)
    ;
}

/* Set up timer to count down from given count, then send a tick interrupt, */
/* over and over. A count of 0 sets max count, 65536 = 2**16 */
void set_timer_count(int count)
{
  outpt(TIMER_CNTRL_PORT, TIMER0|TIMER_SET_ALL|TIMER_MODE_RATEGEN);
  outpt(TIMER0_COUNT_PORT,count&0xff); /* set LSB here */
  outpt(TIMER0_COUNT_PORT,count>>8); /* and MSB here */
  smalldelay();			/* give the timer a moment to init. */
}

/* timer interrupt handler */
void irq0inthandc(void)
{
  pic_end_int();		/* notify PIC that its part is done */
  tickcount++;			/* count the tick in global var */
}
mikehj24@itserver6:~/cs341/mp4_linux$ make clean
rm -f *.o *.syms *.lnx core syms
mikehj24@itserver6:~/cs341/mp4_linux$ make C=measure
gcc -gdwarf-2 -gstrict-dwarf -march=i586 -m32 -fno-builtin -fno-stack-protector -nostdlib -c -Wall -I/home/cheungr/serl/tutor-linux/include -c -o measure.o measure.c
gcc -gdwarf-2 -gstrict-dwarf -march=i586 -m32 -fno-builtin -fno-stack-protector -nostdlib -c -Wall -I/home/cheungr/serl/tutor-linux/include -c -o timepack_sapc.o timepack_sapc.c
[01m[Ktimepack_sapc.c:46:12:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Kenddown[m[Kâ€™ defined but not used [-Wunused-variable]
 static int enddown;
[01;32m[K            ^[m[K
ld -m elf_i386 -N -Ttext 100100 -o measure.lnx \
	/home/cheungr/serl/tutor-linux/libc_tmp/startup0.o /home/cheungr/serl/tutor-linux/libc_tmp/startup.o \
	measure.o timepack_sapc.o /home/cheungr/serl/tutor-linux/libc_tmp/libc.a
rm -f syms;nm -n measure.lnx>measure.syms;ln -s measure.syms syms
mikehj24@itserver6:~/cs341/mp4_linux$ logout
Connection to users.cs.umb.edu closed.
tuser@tutor-vserver:~$ scp mikehj24@users.cs.umb.edu:cs341/mp4_linux/measure.* . [A[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[K.
mikehj24@users.cs.umb.edu's password: 
measure.c                                       0%    0     0.0KB/s   --:-- ETAmeasure.c                                     100% 2409     2.4KB/s   00:00    
measure.lnx                                     0%    0     0.0KB/s   --:-- ETAmeasure.lnx                                   100%   21KB  21.5KB/s   00:00    
measure.o                                       0%    0     0.0KB/s   --:-- ETAmeasure.o                                     100% 6052     5.9KB/s   00:00    
measure.syms                                    0%    0     0.0KB/s   --:-- ETAmeasure.syms                                  100% 1535     1.5KB/s   00:00    
tuser@tutor-vserver:~$ mtip -f measure.lnx
For command help, type ~?
For help on args, rerun without args
Code starts at 0x100100
Using board # 1 
Please type <CR> to confirm console setting: 
Setting console dev to COM2Console: colour EGA+ 80x25
COM1 at 0x03f8 (irq = 4) is a 16550A
COM2 at 0x02f8 (irq = 3) is a 16550A

                 Welcome to UMB Tutor for the PC
   UMB Tutor is a 32-bit protected-mode PC debugger/downloader,
       based on Linux, UMB Tutor for m68k, and remote gdb.
UMB Tutor is free software and you are welcome to distribute copies
of it under certain conditions.  There is no warranty for this program.
The copyright and warranty provisions follow the Gnu general public
license, available for view in gdb and elsewhere.  Full sources available.
--bugs, suggestions, questions to eoneil@cs.umb.edu

Exception 3 at EIP=00057a9b: Breakpoint
Tutor> ~downloading measure.lnx

.......Done.

Download done, setting EIP to 100100.
Tutor> go 100100
Calling set_intr_gate (irq = 3, n = 0x23) to arm interrupt...
Commanding PIC to interrupt CPU for irq 3 (COM2_IRQ)
enabling receiver interrupts in UART...
...done, entering almost-infinite loop

time interval= 57342118 us for char=A
time interval= 1043582 us for char=B
time interval= 988657 us for char=C
time interval= 988657 us for char=D
time interval= 1043582 us for char=E
time interval= 988657 us for char=F
time interval= 988657 us for char=G
time interval= 988657 us for char=0
time interval= 2032239 us for char=1
time interval= 1977314 us for char=2
time interval= 2032239 us for char=3
time interval= 1977314 us for char=4
time interval= 2032239 us for char=5
time interval= 1977314 us for char=6
time interval= 2032239 us for char=a
time interval= 2965971 us for char=b
time interval= 3020897 us for char=c
time interval= 3020897 us for char=d
time interval= 2965971 us for char=e
time interval= 3020897 us for char=f
time interval= 3020897 us for char=g
time interval= 2965971 us for char=M
time interval= 109850 us for char=N
time interval= 109850 us for char=O
time interval= 54925 us for char=P
time interval= 54925 us for char=Q
time interval= 109850 us for char=R
time interval= 54925 us for char=S
time interval= 109850 us for char=0
time interval= 54925 us for char=1
time interval= 109850 us for char=2
time interval= 109850 us for char=3
time interval= 109850 us for char=4
time interval= 54925 us for char=5
time interval= 54925 us for char=6
time interval= 109850 us for char=m
time interval= 109850 us for char=n
time interval= 109850 us for char=o
time interval= 54925 us for char=p
time interval= 109850 us for char=q
time interval= 109850 us for char=r
time interval= 54925 us for char=s
time interval= 8897914 us for char=
Quit handler: 
killing process 1799 Leaving board #1
tuser@tutor-vserver:~$ exit
exit

Script done on Tue 05 May 2020 10:50:58 AM EDT
